import  React, {useEffect, useState, useRef} from 'react';
import Box from '@mui/material/Box';
import BottomNavigation from '@mui/material/BottomNavigation';
import BottomNavigationAction from '@mui/material/BottomNavigationAction';
import RestoreIcon from '@mui/icons-material/Restore';
import PaymentsIcon from '@mui/icons-material/Payments';
import ArchiveIcon from '@mui/icons-material/Archive';
import Paper from '@mui/material/Paper';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemAvatar from '@mui/material/ListItemAvatar';
import ListItemText from '@mui/material/ListItemText';
import Avatar from '@mui/material/Avatar';
import useNearScreen from '../../../hooks/useNearScreen';
import PropTypes from 'prop-types'
import spinner from '../../../assets/spinners/spinner-bars.svg'

export default function History({setScrollBottom, setParams, showSpinner, data, value, setValue}) {
  History.propTypes = {
    setScrollBottom: PropTypes.func,
    setParams: PropTypes.func,
    showSpinner: PropTypes.bool,
    data: PropTypes.object,
    value: PropTypes.number,
    setValue: PropTypes.func,
  }
// variables de estado
    const [array, setArray] = useState([]);
    
// referencias
    const ref = useRef(null);
    const list = useRef(null);
// useEffect
    useEffect(() => {
        list.current.scrollTo(0, 0);
    }, [value]);

    useEffect(() => {
      if (value === 0) {
        setArray(data.SH.history);
        setParams({IT: data.SH.IT, IA: data.SH.history.length});
      }else if (value === 1) {
        setArray(data.PH.history);
        setParams({IT: data.PH.IT, IA: data.PH.history.length});
      }else if (value === 2) {
        setArray(data.TH.history);
        setParams({IT: data.TH.IT, IA: data.TH.history.length});
      }
    }, [value, data]);
  
    const elementRef = useNearScreen({ distance: '0px', threshold: 0.2, root: null, externalRef: ref });
    useEffect(() => {
      if (elementRef.isNearScreen) {
        setScrollBottom(true)
      } else {
        setScrollBottom(false)
      }
    }, [elementRef.isNearScreen]);

    return (
        <Box >
            <List ref={list} sx={{ minHeight: '220px', maxHeight: '220px', overflowY: 'auto', backgroundColor: 'ghostwhite'}}>
                {array?.map(({ lastName, name }, index) => (
                    <ListItem button key={index }>
                        <ListItemAvatar>
                            <Avatar alt="Profile Picture" src={''} />
                        </ListItemAvatar>
                        <ListItemText primary={value === 0 ? name : value === 1 ? index : 'test'} secondary={value === 0 ? lastName : value === 1 ? index + 100 : 'test2'} />
                    </ListItem>
                ))}
                
                <div style={{display: 'flex', justifyContent: 'center', height: '20px'}} ref={ref}><img style={{width:'20px'}} hidden={!showSpinner} src={spinner}/></div>
            </List>
            <Paper sx={{ position: 'relative', bottom: 0, left: 0, right: 0, pb: 0 }}>
                <BottomNavigation
                    showLabels
                    value={value}
                    onChange={(event, newValue) => {
                        setValue(newValue);
                    }}
                >
                    <BottomNavigationAction label="Historial de Siniestro" icon={<RestoreIcon />} />
                    <BottomNavigationAction label="Historial de Pagos" icon={<PaymentsIcon />} />
                    <BottomNavigationAction label="Example" icon={<ArchiveIcon />} />
                </BottomNavigation>
            </Paper>
        </Box>
    );
}

const messageExamples = [
    {
        primary: 'Brunch this week?',
        secondary: "I'll be in the neighbourhood this week. Let's grab a bite to eat",
        person: '/static/images/avatar/5.jpg',
    },
    {
        primary: 'Birthday Gift',
        secondary: `Do you have a suggestion for a good present for John on his work
      anniversary. I am really confused & would love your thoughts on it.`,
        person: '/static/images/avatar/1.jpg',
    },
    {
        primary: 'Recipe to try',
        secondary: 'I am try out this new BBQ recipe, I think this might be amazing',
        person: '/static/images/avatar/2.jpg',
    },
    {
        primary: 'Yes!',
        secondary: 'I have the tickets to the ReactConf for this year.',
        person: '/static/images/avatar/3.jpg',
    },
    {
        primary: "Doctor's Appointment",
        secondary: 'My appointment for the doctor was rescheduled for next Saturday.',
        person: '/static/images/avatar/4.jpg',
    },
    {
        primary: 'Discussion',
        secondary: `Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
        person: '/static/images/avatar/5.jpg',
    },
    {
        primary: 'Summer BBQ',
        secondary: `Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
        person: '/static/images/avatar/1.jpg',
    },
];